{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAEMC,EAAUC,SAASC,cAAc,SACjCC,EAAYF,SAASG,iBAAiB,SACtCC,EAAWF,EAAU,GACrBG,EAAUH,EAAU,GACpBI,EAAYJ,EAAU,GACbF,SAASC,cAAc,UAEtC,SAASM,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EACG,CAAEH,WAAUC,UAGfG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAGPV,EAAQkB,iBAAiB,SAAS,WAChC,IAAIC,EAAQC,SAASf,EAASgB,OAC1BC,EAAOF,SAASd,EAAQe,OACxBE,EAASH,SAASb,EAAUc,OAEhCrB,EAAQkB,iBAAiB,UAAU,SAACM,GAClCA,EAAMC,iBACN,IAAK,IAAIC,EAAI,EAAGA,GAAKH,EAAQG,GAAK,EAChCC,QAAQC,IAAIT,EAAOG,EAAMC,GACzBf,EAAckB,EAAGP,GAAOU,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACxCqB,EAAAjC,GAASkC,OAAOC,QAAQ,qBAAoCC,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAEjEyB,OAAM,SAAAL,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACpBqB,EAAAjC,GAASkC,OAAOI,QAAQ,oBAAmCF,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAEhE2B,SAAQ,WACTrC,EAAQsC,QACRnB,EAAQ,EACRG,EAAO,EACPC,EAAS,C,IAEXJ,GAASG,C","sources":["src/js/03-promises.js"],"sourcesContent":["\nimport Notiflix from 'notiflix';\n\nconst formRef = document.querySelector('.form');\nconst inputsRef = document.querySelectorAll('input');\nconst delayRef = inputsRef[0];\nconst stepRef = inputsRef[1];\nconst amountRef = inputsRef[2];\nconst btnRef = document.querySelector('button');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(\n          ({ position, delay })\n        );\n      } else {\n        reject({ position, delay })\n      }\n    }, delay);\n  });\n}\nformRef.addEventListener('input', () => {\n  let delay = parseInt(delayRef.value);\n  let step = parseInt(stepRef.value);\n  let amount = parseInt(amountRef.value);\n\n  formRef.addEventListener('submit', (event) => {\n    event.preventDefault();\n    for (let i = 0; i <= amount; i += 1) {\n      console.log(delay, step, amount);\n      createPromise(i, delay).then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      }).catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      }).finally(() => {\n        formRef.reset();\n        delay = 0;\n        step = 0;\n        amount = 0;\n      });\n      delay += step;\n    };\n  });\n});\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formRef","document","querySelector","$ce04d3a99e08e73b$var$inputsRef","querySelectorAll","$ce04d3a99e08e73b$var$delayRef","$ce04d3a99e08e73b$var$stepRef","$ce04d3a99e08e73b$var$amountRef","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","delay1","parseInt","value","step","amount","event","preventDefault","i","console","log","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","finally","reset"],"version":3,"file":"03-promises.6cd4d58e.js.map"}