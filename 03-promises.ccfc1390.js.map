{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAUC,SAASC,cAAc,SACjCC,EAAYF,SAASG,iBAAiB,SACtCC,EAAWF,EAAU,GACrBG,EAAUH,EAAU,GACpBI,EAAYJ,EAAU,GACbF,SAASC,cAAc,UAEtC,SAASM,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EACG,C,SAAEH,E,MAAUC,IAGfG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAGbV,EAAQkB,iBAAiB,SAAS,KAChC,IAAIC,EAAQC,SAASf,EAASgB,OAC1BC,EAAOF,SAASd,EAAQe,OACxBE,EAASH,SAASb,EAAUc,OAEhCrB,EAAQkB,iBAAiB,UAAWM,IAClCA,EAAMC,iBACN,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAQG,GAAK,EAC/BC,QAAQC,IAAIT,EAAOG,EAAMC,GACzBf,EAAckB,EAAGP,GAAOU,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,MACxCoB,EAAAhC,GAASiC,OAAOC,QAAQ,qBAAqBvB,QAAeC,MAAU,IAErEuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MACpBoB,EAAAhC,GAASiC,OAAOG,QAAQ,oBAAoBzB,QAAeC,MAAU,IAEpEyB,SAAQ,KACTnC,EAAQoC,QACRjB,EAAQ,EACRG,EAAO,EACPC,EAAS,CAAC,IAEZJ,GAASG,C,GAEX","sources":["src/js/03-promises.js"],"sourcesContent":["\nimport Notiflix from 'notiflix';\n\nconst formRef = document.querySelector('.form');\nconst inputsRef = document.querySelectorAll('input');\nconst delayRef = inputsRef[0];\nconst stepRef = inputsRef[1];\nconst amountRef = inputsRef[2];\nconst btnRef = document.querySelector('button');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(\n          ({ position, delay })\n        );\n      } else {\n        reject({ position, delay })\n      }\n    }, delay);\n  });\n}\nformRef.addEventListener('input', () => {\n  let delay = parseInt(delayRef.value);\n  let step = parseInt(stepRef.value);\n  let amount = parseInt(amountRef.value);\n\n  formRef.addEventListener('submit', (event) => {\n    event.preventDefault();\n    for (let i = 0; i < amount; i += 1) {\n      console.log(delay, step, amount);\n      createPromise(i, delay).then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      }).catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      }).finally(() => {\n        formRef.reset();\n        delay = 0;\n        step = 0;\n        amount = 0;\n      });\n      delay += step;\n    };\n  });\n});\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formRef","document","querySelector","$47d4ff9957288465$var$inputsRef","querySelectorAll","$47d4ff9957288465$var$delayRef","$47d4ff9957288465$var$stepRef","$47d4ff9957288465$var$amountRef","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","delay1","parseInt","value","step","amount","event","preventDefault","i","console","log","then","$parcel$interopDefault","Notify","success","catch","failure","finally","reset"],"version":3,"file":"03-promises.ccfc1390.js.map"}